from minisweagent.agents.interactive import InteractiveAgent
from minisweagent.agents.default import DefaultAgent
from minisweagent.environments.local import LocalEnvironment
from minisweagent.models.litellm_model import LitellmModel
from minisweagent.run.utils.save import save_traj

from src.tickettocodeagent.model.model import TaskParameter
from src.tickettocodeagent.config.env import env
from src.tickettocodeagent.config.config import custom_agent_config
import logging
import datetime
import os
import shutil
from pathlib import Path
from src.tickettocodeagent.tools.git import Git
from src.tickettocodeagent.tools.git_provider.git_provider_port import GitProviderPort

log = logging.getLogger(__name__)


class TaskProcessor:
    _git: Git
    _git_provider: GitProviderPort

    def __init__(self, git_provider: GitProviderPort):
        self._git = Git()
        self._git_provider = git_provider

    def process(self, task_parameter: TaskParameter):
        _config = custom_agent_config.get_config()
        _agent_config = _config.setdefault("agent", {})
        _env_config = _config.setdefault("environment", {})
        _model_config = _config.setdefault("model", {})
        repo_folder = "./working_dir"

        agent = InteractiveAgent(
            LitellmModel(
                model_name=env.LLM_MODEL_NAME,
                model_kwargs={
                    **_model_config.get("model_kwargs", {}),
                    "api_key": env.GEMINI_API_KEY.get_secret_value(),
                },
            ),
            LocalEnvironment(**_env_config),
            **_agent_config,
        )

        repo_url = task_parameter.repo_url

        self._git.clone(repo_url, repo_folder)

        log.info(f"Running agent with task: {task_parameter.body}")
        exit_status, result = None, None
        try:
            exit_status, result = agent.run(
                task_parameter.body, working_dir=repo_folder
            )

            date_time_string: str = datetime.datetime.now(tz=datetime.UTC).strftime(
                "%Y%m%d-%H%M%S"
            )
            branch_name = f"Ticket2Code_{task_parameter.ticket_id}_autogenerated_branch_{date_time_string}"
            commit_message = f"Ticket2Code {task_parameter.ticket_id} using auto generated commit {date_time_string}"
            # if GENERATE_COMMIT_MESSAGE:
            #     commit_message = f"{get_commit_message(result)}\n[[{commit_message}]]"

            self._git.create_and_push_branch(
                workspace_path=repo_folder,
                branch_name=branch_name,
                commit_message=commit_message,
            )
            self._git_provider.create_pull_request(task_parameter, branch_name)
        except KeyboardInterrupt:
            log.error("KeyboardInterrupt -- goodbye")
        finally:
            if os.path.exists(repo_folder):
                shutil.rmtree(repo_folder)
                log.info(f"Cleaned up repository folder: {repo_folder}")
            save_traj(agent, Path("traj.json"), exit_status=exit_status, result=result)
